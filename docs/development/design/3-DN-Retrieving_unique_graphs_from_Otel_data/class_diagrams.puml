@startuml

struct OTelEvent {
    job_name: str
    job_id: str
    event_type: str
    event_id: str
    start_timestamp: str
    end_timestamp: str
    application_name: str
    parent_event_id: Optional[str]
    child_event_ids: Optional[list[str], None]
}

abstract class OTELDataSource {
    +__iter__(): Self
    +__next__(): OTelEvent
}

class JSONDataSource {
    #config: JSONDataSourceConfig
    #current_file_index: int
    #current_parser: Iterator[OTelEvent] | None
    #dirpath : str
    #filepath: str
    #file_list: list[str]
    +__init__(): None
    +__next__(): OTelEvent
    +parse_json_stream(filepath: str): Iterator[OTelEvent]
    +create_otel_object(record: dict[str, Any]): OTelEvent
    +set_dirpath(): str | None
    +set_filepath(): str | None
    +get_file_list(): list[str]
    +process_record(record: dict[str, Any]): Iterator[OTelEvent]
}

class SQLDataHolder {
    #data_to_save: list<OTelEvent>
    #batch_size: int
    #engine: str
    +create_db_tables(): None
}

class NodeModel {
    id: int
    job_name: str
    job_id: str
    event_type: str
    event_id: str
    start_timestamp: datetime
    end_timestamp: datetime
    application_name: str
    parent_event_id: str
    child_event_ids: Optional[list[str], None]
}

class Base {
    ""SQLAlchemy declarative base class""
}

abstract class DataHolder {
    +save_data(OTelEvent): None
}

class IngestData {
    #otel_data_source : OTELDataSource
    #data_holder : DataHolder
    +load_to_data_holder(): None
}

IngestData ..> OTELDataSource
IngestData ..> DataHolder
OTELDataSource ..> OTelEvent
JSONDataSource --> OTELDataSource
SQLDataHolder --> DataHolder
SQLDataHolder ..> NodeModel
NodeModel --> Base
DataHolder ..> OTelEvent


@enduml