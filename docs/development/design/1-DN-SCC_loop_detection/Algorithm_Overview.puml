@startuml
    start
    :Input directed graph;
    :Initalise dictionary of LoopEvents and subgraphs;
    partition "Loop detection algorithm" {
        :Get SCC components of graph;
        repeat
            :Get SCC component;
            partition "Replace SCC component with LoopEvent vertex" {
                :Calculate in edges of SCC component;
                :Calculate out edges of SCC component;
                :Create LoopEvent vertex;
                :Update in + out EventSets of LoopEvent vertex;
                :Update in + out EventSets with LoopEvent vertex;
            }
            partition "Create SCC sub graph" {
                :Calculate "start points" of loop;
                :Calculate "end points" of loop;
                :Remove edges that create loop;
                :Add start Event vertex to SCC sub graph;
                :Add end Event vertex to SCC sub graph;
                :Create out EventSets of start Event vertex;
                :Create in EventSets of end Event vertex;
            }
            :Add SCC sub graph to dictionary\nof LoopEvent and subgraph;
            :Run SCC detection algorithm on sub graph;
            :Update dictionary of LoopEvents and tuple\nof subgraphs and recursive sub dictionary;
            :Recalculate graph from updated vertices;
        repeat while (SCC components are not empty)
    }
    :Output tuple of graph with recursive dictionary of LoopEvent\nto tuple of subgraph and recursive sub dictionary;
@enduml