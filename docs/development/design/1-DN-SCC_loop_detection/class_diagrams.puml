@startuml

class Event {
    #event_type : str
    #uid: str
    +event_sets : set<EventSet>
    +in_event_sets : set<EventSet>
    +logic_gate_tree: ProcessTree
    +__hash__() : int
    +update_event_sets([]str): void
    +update_in_event_sets([]str): void
}

struct Loop {
    loop_events: set<Event>
    start_events: set<Event>
    end_events: set<Event>
    break_events: set<Event>
    edges_to_remove: set<EventTuple>
}

class LoopEvent {
    #sub_graph: EventGraph
    #start_uid: str
    #end_uid: str
    #break_uids: set<str>
}

class EventTuple {
    #out_event : Event
    #in_event : Event
    +__hash__() : int
    +__eq__(EventTuple): bool
}


class EventSet <inherits from dict> {
    #self : dict<str, int>
    +__hash__() : int
    +__eq__(EventSet): bool
}

class EventGraph {
    nodes: set<Event>
    edges: set<EventTuple>
}


Event ..> EventSet
EventGraph ..> Event
EventGraph ..> EventTuple
EventTuple ..> Event
LoopEvent --> Event
Loop ..> EventTuple
Loop ..> Event
LoopEvent ..> EventGraph

@enduml