@startuml
    partition "calc_loop_end_break_and_loop_edges" {
        start
        :input start events, SCC loop events and graph;
        group "main algorithm"
        :input start events, SCC loop events and graph;
        :find all nodes that have an edge not pointing back into scc;
        :find all loop end nodes using "loop end node algorithm";
        if (check if edges exiting loop exist) then (no edges exist)
            :no break edges; 
        else (edges exist)
            :get set of end nodes that intersect with nodes that exit loop;
            if (check size of subset) then (subset empty)
                :break nodes are the nodes that exit the loop;
            else (subset not empty)
                :break nodes are calculated as nodes at the end of the paths\nbetween those nodes not in the\nsubset and between the exits points from end nodes;
            endif
        endif
        :set loop edges as all edges between\nend events and start events;
        :output end events, break events and loop edges;
        end group
        end
        partition "sub algorithms" {
            start 
            :input start nodes, scc nodes and graph;
            group "loop end node algorithm"
            :find the nodes with edges to start nodes as potential end nodes;
            :copy graph and remove edges to start nodes;
            repeat
                :set node as potential end node;
                repeat
                    :set as other potential end node;
                    :check if other potential end node\nhas path to potential end node but not vice versa;
                    if () then (true)
                        :potential end node is not a loop end node and remove from set;
                        break
                    else (false)
                        :continue;
                    endif
                repeat while (for each potential end node)
            repeat while (for each potential end node)
            :output end nodes that were not removed from set;
            end group
            end
        }
    }
@enduml