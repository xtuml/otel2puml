@startuml
    start
    :Input directed graph of Events and LoopEvent;
    partition "create_node_graph_from_event_graph" {
        :create directed graph of Nodes and SubGraphNodes;
        :create dictionary to map Event to Node;
        :get all Events in graph;
        repeat
            partition "create_node_from_event" {
                if (Event is LoopEvent) then (true)
                    :Create SubGraphNode from LoopEvent;
                else (false)
                    :Create Node from Event;
                endif
            }
            :Add Node/SubGraphNode to dictionary;
        repeat while (for each Event in graph)
        :get all edges in Event graph;
        repeat
            :Create NodeTuple from edge using dictionary;
            partition "update_graph_with_node_tuple" {
                :Add NodeTuple to directed graph of Nodes;
                :update outgoing Nodes of outnode of NodeTuple;
                :update incoming Nodes of innode of NodeTuple;
            }
        repeat while (for each edge in graph)
        repeat
            partition "update_incoming_and_outgoing_logic_nodes" {
                :update incoming and outgoing logic Nodes of each Node;
            }
        repeat while (for each entry in dictionary)
        repeat
            if (Event is LoopEvent) then (true)
                :call create_node_graph_from_event_graph on LoopEvent subgraph|
                :Add subgraph to SubGraphNode;
            endif
        repeat while (for each entry in dictionary)
        :Output directed graph of Nodes and SubGraphNodes;
    }
    end
    start
    :Input directed graph of Nodes and SubGraphNodes;
    partition "walk_nested_graph" {
        :create map of SubGraphNodes to PUMLGraph;
        :get all SubGraphNodes in graph;
        repeat
            :call walk_nested_graph on SubGraphNode to get PUMLGraph;
            :add SubGraphNode and PUMLGraph to map;
        repeat while (for each SubGraphNode in graph)
        :call create_puml_graph_from_node_class_graph with input Node graph;
        repeat
            partition "add_sub_graph_to_puml_node" {
                :find all PUMLNodes in PUMLGraph corresponding to SubGraphNode;
                repeat
                    :add PUMLGraph to PUMLNode;
                repeat while (for each PUMLNode in graph)
            }
        repeat while (for each entry in map)
    }
    end
@enduml